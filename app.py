import streamlit as st
import os
import time
import json
from PIL import Image
from modules.ocr_module import OCRModule
from modules.extraction_module import DataExtractionModule
from modules.llm_enhancement import LLMEnhancementModule
from analytics import AnalyticsLayer

st.set_page_config(page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", layout="wide")

@st.cache_resource
def load_modules():
    return {
        'ocr_ru': OCRModule(lang='ru'),
        'ocr_en': OCRModule(lang='en'),
        'extraction': DataExtractionModule()
    }

@st.cache_resource
def load_analytics():
    return AnalyticsLayer()

def main():
    st.title("üè¶ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # Sidebar for LLM configuration
    with st.sidebar:
        st.header("‚ö° LLM Enhancement")
        api_key = st.text_input(
            "OpenAI API Key",
            type="password",
            help="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á OpenAI API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é ChatGPT"
        )

        if api_key:
            os.environ['OPENAI_API_KEY'] = api_key
            st.success("‚úÖ LLM Enhancement –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            st.info("üí° –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    modules = load_modules()
    analytics = load_analytics()

    tab1, tab2 = st.tabs(["üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])

    with tab1:
        st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        col1_ui, col2_ui = st.columns(2)

        with col1_ui:
            module_choice = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å",
                ["–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"]
            )

        with col2_ui:
            language = st.selectbox(
                "–Ø–∑—ã–∫",
                ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"]
            ) if module_choice == "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞" else "–†—É—Å—Å–∫–∏–π"

        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
            type=['png', 'jpg', 'jpeg', 'pdf']
        )

        if uploaded_file is not None:
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("–í—Ö–æ–¥–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç")

                temp_path = f"/tmp/{uploaded_file.name}"
                with open(temp_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())

                if uploaded_file.name.lower().endswith('.pdf'):
                    st.info(f"üìÑ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {uploaded_file.size:,} –±–∞–π—Ç")

                    try:
                        import fitz
                        doc = fitz.open(temp_path)
                        if doc.page_count > 0:
                            page = doc.load_page(0)
                            pix = page.get_pixmap(matrix=fitz.Matrix(0.5, 0.5))
                            img_data = pix.tobytes("png")
                            st.image(img_data, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {doc.page_count}", width=400)
                        doc.close()
                    except:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é PDF")
                else:
                    image = Image.open(uploaded_file)
                    st.image(image, width=400)

            with col2:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

                if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary"):
                    start_time = time.time()

                    try:
                        if module_choice == "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞":
                            ocr_module = modules['ocr_ru'] if language == "–†—É—Å—Å–∫–∏–π" else modules['ocr_en']

                            with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ OCR ({language})..."):
                                if st.checkbox("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ"):
                                    result = ocr_module.process_with_noise_handling(temp_path, True)
                                else:
                                    result = ocr_module.process(temp_path)

                                st.text_area("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", result, height=300)

                        else:
                            with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                                result = modules['extraction'].process(temp_path)

                                if 'error' in result:
                                    st.error(f"–û—à–∏–±–∫–∞: {result['error']}")
                                else:
                                    st.json(result)

                        execution_time = time.time() - start_time

                        analytics.log_result(
                            module_name=f"{module_choice} ({language})",
                            input_path=uploaded_file.name,
                            output=result,
                            execution_time=execution_time
                        )

                        st.success(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

                    finally:
                        if os.path.exists(temp_path):
                            os.remove(temp_path)

    with tab2:
        st.header("–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

        if analytics.results_history:
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("OCR –º–æ–¥—É–ª—å")
                ocr_summary = analytics.get_module_performance_summary("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
                if 'error' not in ocr_summary:
                    st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{ocr_summary['success_rate']:.2%}")
                    st.metric("–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤", ocr_summary['total_runs'])
                    if ocr_summary['average_execution_time']:
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{ocr_summary['average_execution_time']:.2f}—Å")

            with col2:
                st.subheader("–ú–æ–¥—É–ª—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
                ext_summary = analytics.get_module_performance_summary("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                if 'error' not in ext_summary:
                    st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{ext_summary['success_rate']:.2%}")
                    st.metric("–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤", ext_summary['total_runs'])
                    if ext_summary['average_execution_time']:
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{ext_summary['average_execution_time']:.2f}—Å")

            st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            recent_results = analytics.get_recent_results(10)
            for result in reversed(recent_results):
                with st.expander(f"{result['module']} - {result['timestamp'][:19]}"):
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.write(f"**–§–∞–π–ª:** {result['input_path']}")
                    with col2:
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –£—Å–ø–µ—Ö' if result['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
                    with col3:
                        if result['execution_time']:
                            st.write(f"**–í—Ä–µ–º—è:** {result['execution_time']:.2f}—Å")

            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"):
                export_data = analytics.export_results('json')
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç JSON",
                    data=export_data,
                    file_name=f"analytics_report_{int(time.time())}.json",
                    mime="application/json"
                )
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–∞. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")

if __name__ == "__main__":
    main()